//WARNING: This file is AUTOMATICALLY generated. Changes will be OVERWRITTEN!
#include "main.h"

#include <spdlog/sinks/stdout_sinks.h>

#include <master_h/macro/logger.h>

#include "../factory.h"

#include "d02.h"
#include "d03.h"
#include "d04.h"
#include "d05.h"
#include "d08.h"
#include "d14.h"
#include "d22.h"

namespace tul{
namespace challenge{
namespace aoc{
namespace y2019{

TUL_MACRO_PREFIX__LOGGER__LOGGER_DEF

void init_logger(){
	//only init one time
	if (!TUL_MACRO_PREFIX__LOGGER__LOGGER_VAR_NAME){
		TUL_MACRO_PREFIX__LOGGER__LOGGER_VAR_NAME = spdlog::stdout_logger_mt("aoc/2019");
		TUL_MACRO_PREFIX__LOGGER__LOGGER_VAR_NAME->set_level(spdlog::level::trace);
		TUL_MACRO_PREFIX__LOGGER__LOGGER_VAR_NAME->set_pattern("(%t) [%n:%l] %v");
	}
}

std::unique_ptr<Solver> load(int day){
	//initialize logger for year
	init_logger();

	switch (day){
	case 2:
		{
		Factory<D02> f;
		return f.construct();
		}
	case 3:
		{
		Factory<D03> f;
		return f.construct();
		}
	case 4:
		{
		Factory<D04> f;
		return f.construct();
		}
	case 5:
		{
		Factory<D05> f;
		return f.construct();
		}
	case 8:
		{
		Factory<D08> f;
		return f.construct();
		}
	case 14:
		{
		Factory<D14> f;
		return f.construct();
		}
	case 22:
		{
		Factory<D22> f;
		return f.construct();
		}
	default:
		return nullptr;
	}
}

}
}
}
}
