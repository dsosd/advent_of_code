//WARNING: This file is AUTOMATICALLY generated. Changes will be OVERWRITTEN!
#include <fstream>

#include <catch2/catch.h>

#include <challenge/advent_of_code/main.h>

namespace tul{
namespace test{
namespace aoc{

TEST_CASE( "aoc/2019_08_1", "[aoc], [aoc/2019]" ){
	auto solver = challenge::aoc::load(2019, 8);
	auto answer = [&solver](std::istream& in){
		return solver->part_1(in).get_answer();
	};

	SECTION( "hidden case I" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_1");
		REQUIRE( answer(in) == "1905" );
	}

	SECTION( "hidden case II" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_2");
		REQUIRE( answer(in) == "1206" );
	}

	SECTION( "hidden case III" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_3");
		REQUIRE( answer(in) == "1862" );
	}

	SECTION( "hidden case IV" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_4");
		REQUIRE( answer(in) == "1596" );
	}

	SECTION( "hidden case V" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_5");
		REQUIRE( answer(in) == "2356" );
	}

	SECTION( "hidden case VI" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_6");
		REQUIRE( answer(in) == "1441" );
	}

	SECTION( "hidden case VII" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_7");
		REQUIRE( answer(in) == "1474" );
	}

	SECTION( "hidden case VIII" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_8");
		REQUIRE( answer(in) == "1820" );
	}

	SECTION( "hidden case IX" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_9");
		REQUIRE( answer(in) == "2032" );
	}

	SECTION( "hidden case X" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_10");
		REQUIRE( answer(in) == "828" );
	}

	SECTION( "hidden case XI" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_11");
		REQUIRE( answer(in) == "1703" );
	}

	SECTION( "hidden case XII" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_12");
		REQUIRE( answer(in) == "1088" );
	}

	SECTION( "hidden case XIII" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_13");
		REQUIRE( answer(in) == "2460" );
	}
}

TEST_CASE( "aoc/2019_08_2", "[aoc], [aoc/2019]" ){
	auto solver = challenge::aoc::load(2019, 8);
	auto answer = [&solver](std::istream& in){
		return solver->part_2(in).get_answer();
	};

	SECTION( "hidden case I" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_1");
		REQUIRE( answer(in) == "ACKPZ" );
	}

	SECTION( "hidden case II" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_2");
		REQUIRE( answer(in) == "EJRGP" );
	}

	SECTION( "hidden case III" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_3");
		REQUIRE( answer(in) == "GCPHL" );
	}

	SECTION( "hidden case IV" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_4");
		REQUIRE( answer(in) == "LBRCE" );
	}

	SECTION( "hidden case V" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_5");
		REQUIRE( answer(in) == "PZEKB" );
	}

	SECTION( "hidden case VI" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_6");
		REQUIRE( answer(in) == "RUZBP" );
	}

	SECTION( "hidden case VII" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_7");
		REQUIRE( answer(in) == "JCRCB" );
	}

	SECTION( "hidden case VIII" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_8");
		REQUIRE( answer(in) == "ZUKCJ" );
	}

	SECTION( "hidden case IX" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_9");
		REQUIRE( answer(in) == "CFCUG" );
	}

	SECTION( "hidden case X" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_10");
		REQUIRE( answer(in) == "ZLBJF" );
	}

	SECTION( "hidden case XI" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_11");
		REQUIRE( answer(in) == "HCGFE" );
	}

	SECTION( "hidden case XII" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_12");
		REQUIRE( answer(in) == "LGYHB" );
	}

	SECTION( "hidden case XIII" ){
		std::ifstream in("test/advent_of_code/2019/08_hidden_13");
		REQUIRE( answer(in) == "LRFKU" );
	}
}

}
}
}
