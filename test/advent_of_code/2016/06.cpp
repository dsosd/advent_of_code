//WARNING: This file is AUTOMATICALLY generated. Changes will be OVERWRITTEN!
#include <fstream>

#include <catch2/catch.h>

#include <challenge/advent_of_code/main.h>

namespace tul{
namespace test{
namespace aoc{

TEST_CASE( "aoc/2016_06_1", "[aoc], [aoc/2016]" ){
	auto solver = challenge::aoc::load(2016, 6);
	auto answer = [&solver](std::istream& in){
		return solver->part_1(in).get_answer();
	};

	SECTION( "example case I" ){
		std::ifstream in("test/advent_of_code/2016/06_example_1");
		REQUIRE( answer(in) == "easter" );
	}

	SECTION( "hidden case I" ){
		std::ifstream in("test/advent_of_code/2016/06_hidden_1");
		REQUIRE( answer(in) == "zcreqgiv" );
	}

	SECTION( "hidden case II" ){
		std::ifstream in("test/advent_of_code/2016/06_hidden_2");
		REQUIRE( answer(in) == "mshjnduc" );
	}

	SECTION( "hidden case III" ){
		std::ifstream in("test/advent_of_code/2016/06_hidden_3");
		REQUIRE( answer(in) == "mlncjgdg" );
	}
}

TEST_CASE( "aoc/2016_06_2", "[aoc], [aoc/2016]" ){
	auto solver = challenge::aoc::load(2016, 6);
	auto answer = [&solver](std::istream& in){
		return solver->part_2(in).get_answer();
	};

	SECTION( "example case I" ){
		std::ifstream in("test/advent_of_code/2016/06_example_1");
		REQUIRE( answer(in) == "advent" );
	}

	SECTION( "hidden case I" ){
		std::ifstream in("test/advent_of_code/2016/06_hidden_1");
		REQUIRE( answer(in) == "pljvorrk" );
	}

	SECTION( "hidden case II" ){
		std::ifstream in("test/advent_of_code/2016/06_hidden_2");
		REQUIRE( answer(in) == "apfeeebz" );
	}

	SECTION( "hidden case III" ){
		std::ifstream in("test/advent_of_code/2016/06_hidden_3");
		REQUIRE( answer(in) == "bipjaytb" );
	}
}

}
}
}
